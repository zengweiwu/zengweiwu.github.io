<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>旅游网项目小结</title>
    <url>/2020/08/28/%E6%97%85%E6%B8%B8%E7%BD%91%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93/</url>
    <content><![CDATA[<hr style=" border:solid; width:900px; height:1px;" color=#000000 size=1">

<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇博客就是简单总结下完成项目过程中遇到的问题和学到的东西。</p>
<hr style=" border:solid; width:900px; height:1px;" color=#000000 size=1">



<h1 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h1><h2 id="web层"><a href="#web层" class="headerlink" title="web层"></a>web层</h2><ol>
<li>前端控制</li>
<li>Servlet：前端控制器</li>
<li>ajax:发送异步请求</li>
<li>html ：视图</li>
<li>Filter：过滤器</li>
<li>BeanUtils：数据封装</li>
<li>Jackson：json序列化工具</li>
</ol>
<h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><ol start="8">
<li>javamail：java发送邮件工具</li>
<li>Redis：nosql内存数据库</li>
<li>Jedis：java的redis客户端</li>
</ol>
<h2 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h2><ol start="11">
<li>Mysql：数据库</li>
<li>Druid：数据库连接池</li>
<li>JdbcTemplate：jdbc的工具</li>
</ol>
<h2 id="关于maven"><a href="#关于maven" class="headerlink" title="关于maven"></a>关于maven</h2><ol>
<li><p><strong>maven的作用</strong>:maven能帮你构建工程，管理 jar包，编译代码，还能帮你自动运行单元测试，打包，生成报表，甚至能帮你部署项目，生成 Web 站点。</p>
</li>
<li><p><strong>maven的优势</strong>：使用maven给我最直观的便利就是找jar包很方便，再也不用自己手动去网上下载jar了。还有一个大的便利就是maven的一键构建的功能，编译打包部署一气呵成。这是maven的两个最大的优势。</p>
</li>
<li><p><strong>maven的配置</strong>：<br>  第一步我们安装好maven后需要配置下环境变量<br>  <img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dT5QRU.md.png" alt="配置环境变量"></p>
<p>  第二步我们找到maven安装目录下的conf文件下的setting.xml文件，打开文件找到<localRepository>/path/to/local/repo</localRepository>标签，（记得要去掉注释）将标签中的地址换成我们的本地仓库（本地仓库的话可以自己网上找）就可以了。为什么要配置本地仓库呢？如果没有配置本地仓库maven会去中央仓库联网下载jar包（如果有远程仓库的话会先去远程仓库下载），而maven中央仓库是在国外的可想而知比较慢，当然你也可以配置下中央仓库国内的镜像，配置了本地仓库如果本地仓库有的话就直接从本地就不需要联网下载了。如果想要搞一些个性化的配置我们可以到用户目录下的setting.xml文件中配置。<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dT5KiV.png" alt="配置图"><br><strong>我对maven的理解</strong>：<br>我觉得maven就像一个管家，就比如说我们平常一个人做饭，首先要做菜我们得先有菜吧，所以我们得先去买菜，要买肉去肉铺买，买蔬菜去卖蔬菜的地方买，买调料去商店买，好不买好菜了，于是我们回家做饭，做完饭不经感慨做饭真是不容易，买菜走得腿都要缺了，这时候我们想要是有管家能帮我们买菜就好了，这样我们就有更多的时间来专心于做饭了。写代码就像做饭，而maven就是那个管家，他帮我们解决了“买菜”的过程，我们只要告诉他我们需要什么“菜”什么“调料”，他就能帮我们准备好,我们只管专心“做饭”了。</p>
</li>
</ol>
<h1 id="遇到的问题以及解决办法"><a href="#遇到的问题以及解决办法" class="headerlink" title="遇到的问题以及解决办法"></a>遇到的问题以及解决办法</h1><ol>
<li><p>在写注册激活模块的时，使用javaMail发送邮件，输入了正确的邮箱和密码，但是不能发送邮件，后来了解到要通过第三方平台发送邮件的话需要授权码，申请授权码后，将用户名和授权码传给javaMai就能发送邮件了。</p>
</li>
<li><p>退出功能是利用超链接发送一个请求给后端，然后后端销毁session，重定向到登陆页面。在这里遇到的问题是请求发不出去，后来发现是我前台的请求路径写得不对，给浏览器的路径是绝对路径但是没有写虚拟路径的名称，所以导致了请求发送部出去。修改路径后问题解决。</p>
</li>
<li><p>我们每写一个功能都要写一个servlet，这样servlet会很多，于是做了下优化，创建一个baseservlet继承自httpservlet，重写里面的service方法，在这里通过反射完成方法的调用，我们再写一个userservlet继承自baseservlet，添加我们实现相关功能的方法就可以了，这样有关用户的功能只需要一个servlet就可以实现了。当时不是很理解这种做法，和它实现的原理，最后通过查看httpservlet源码理解了，继承方式如下：</p>
</li>
</ol>
<p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/08/29/dT5MGT.md.png" alt="servlet关系图"></p>
<ol start="4">
<li><p>分类的数据在每一次页面加载后都会重新请求数据库来加载，对数据库的压力比较大，而且分类的数据不会经常产生变化，所有可以使用redis来缓存这个数据。第一次访问时我们先从缓存中查，但是这时候缓存里面肯定是没有数据的，我们得先从数据库查询，查询出来返回一个分类对象的list，然后在将查询出来的list存到缓存中去，第二次我们就能够直接从缓存中取出数据了，但是后面发现我们从缓存中取出来的数据没有cid，而且每次查询出来的数据顺序都是不一样的。检查发现在向缓存中存数据的时候我们用的是set集合，而这个集合是无序的当然查出来的顺序是乱的。最后使用zset解决了以上问题。</p>
</li>
<li><p>在做组合条件查询的时候遇到了如何获取查询请求参数的问题，最后是给搜索按钮绑定了一个单击事件，当点击按钮时从搜索框获取搜索关键字，将关键字作为参数放到地址栏传递给路线列表页面，当页面完成加载时，从地址栏获取参数发送请求，由于从地址栏获取的中文的参数时用了uri编码的，所以记得先解码再传递参数到后端。</p>
</li>
<li><p>。。。</p>
</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是这次项目中遇到一些主要问题，还有一些问题忘记了，把记得的做一个简单的记录。只有不断发现问题解决问题技术才能长进。</p>
]]></content>
      <categories>
        <category>项目总结</category>
      </categories>
      <tags>
        <tag>项目</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+github搭建个人博客</title>
    <url>/2020/09/06/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h1><p>hexo支持markdown语法，它是基于nodejs的静态网站生成框架，nodejs是一个基于Chrome的JavaScript运行环境，要想运行hexo首先要安装其运行环境nodejs。</p>
<ul>
<li>nodejs的安装<br><a href="https://nodejs.org/dist/v9.11.1/node-v9.11.1-x64.msi">nodejs win 64 下载地址</a><br>下载下来一路next即可<br>安装完成后，打开命令行输入 node -v 和 npm -v 显示出版本信息就是安装成功了！<br>为了加快访问速度，输入以下命令添加阿里镜像进行加速<blockquote>
<p>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p>
</blockquote>
<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><a href="https://git-scm.com/download/win">git下载地址</a><br>git是一个分布式版本控制工具，安装git可以将我们的博客网页部署到服务器上。git的安装也是很简单，安装时选项全部默认，只不过最后一步选<br>Use Git from the Windows Command Prompt</li>
</ul>
<p>点击finish。接着我们在命令提示符中输入git –version显示版本信息则我们的git安装成功！</p>
<h1 id="github新建仓库"><a href="#github新建仓库" class="headerlink" title="github新建仓库"></a>github新建仓库</h1><ul>
<li>新建仓库时，仓库的名字后面一定要加.github.io后缀。</li>
<li>仓库建成了，点击Settings，下拉到最后选择GitHub Pages，点击Choose a theme选择一个主题。然后等一会儿，再回到GitHub Pages，会有一个超链接，这个链接就是我们的博客网址了。<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1></li>
<li>在合适的地方新建一个目录来存放你的博客，然后在新建的目录下打开git的控制台窗口：<br><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/09/06/wZQZin.md.png" alt="打开控制台在这里面输入命令安装hexo"></li>
</ul>
<ul>
<li><p>好的，我们现在就在我们刚刚新建的目录下面，接着输入npm i hexo-cli -g安装Hexo。会有几个报错，不要管它，输入 hexo -v 验证是否安装成功，出现版本信息则安装成功！</p>
</li>
<li><p>接着输入hexo init初始化我们新建的博客文件夹，接着输入npm install安装依赖。</p>
</li>
<li><p>好了，到这里我们可以来测试下hexo了，输入hexo g生成静态网页，然后输入hexo s打开本地服务器，浏览器打开<a href="http://localhost:4000/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BA%86%E3%80%82%E7%8E%B0%E5%9C%A8%E6%88%91%E4%BB%AC%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%BF%98%E6%98%AF%E5%9C%A8%E6%9C%AC%E5%9C%B0%EF%BC%8C%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%88%91%E4%BB%AC%E8%A6%81%E5%88%A9%E7%94%A8git%E5%B0%86%E5%85%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E8%BF%9C%E7%A8%8B%E7%9A%84github%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%88%AB%E4%BA%BA%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E5%88%B0%E6%88%91%E4%BB%AC%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%BA%86%E3%80%82">http://localhost:4000/就可以看到我们的博客了。现在我们的博客还是在本地，接下来我们要利用git将其部署到远程的github服务器上，这样别人就可以访问到我们的博客了。</a></p>
</li>
</ul>
<h1 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Github"></a>连接Github</h1><ul>
<li><p>打开git bash，然后输入下面命令：</p>
<blockquote>
<p> git config –global user.name “你的github用户面积”<br>git config –global user.email “你的github注册邮箱”</p>
</blockquote>
</li>
</ul>
<ul>
<li><p>输入以下命令生成密钥SSH key：</p>
<blockquote>
<p>ssh-keygen -t rsa -C “你的github注册邮箱”</p>
</blockquote>
</li>
<li><p>登录github，进入settings，再点击SSH and GPG keys，新建一个SSH。</p>
</li>
<li><p>git bash中输入：</p>
<blockquote>
<p>cat ~/.ssh/id_rsa.pub</p>
</blockquote>
<p>将id_ras.pub公钥里面的内容填入github新建密钥的框中，保存。</p>
</li>
<li><p>控制台，输入ssh -T <a href="mailto:&#103;&#105;&#x74;&#x40;&#x67;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#109;">&#103;&#105;&#x74;&#x40;&#x67;&#x69;&#116;&#x68;&#117;&#x62;&#x2e;&#x63;&#111;&#109;</a>，出现你的用户名则连接github成功！</p>
</li>
<li><p>打开我们刚刚初始化的博客目录，找到_config.yml文件，配置部署的相关信息：<br>deploy:<br>type: git<br>repository:这里填你github博客仓库的地址<br>  branch: master<br>repository修改为你自己的github项目地址。</p>
<h1 id="安装部署工具"><a href="#安装部署工具" class="headerlink" title="安装部署工具"></a>安装部署工具</h1></li>
</ul>
<p>首先在博客根目录下打开git bash，输入：</p>
<blockquote>
<p>npm i hexo-deployer-git</p>
</blockquote>
<p>npm会帮我们安装好部署工具，以后我们就可以实现一键部署我们的博客了！</p>
<h1 id="写博客-部署"><a href="#写博客-部署" class="headerlink" title="写博客 部署"></a>写博客 部署</h1><p>在博客目录下打开git bash 输入hexo new post “article title”，新建一篇文章。你会看到在当前的source_posts的目录中多了一个.md文件，这就是你新建的文章了。</p>
<p>接下来我们可以打开这个md文件用markdown编写博客。编写完成保存！</p>
<p>然后输入hexo g生成静态网页，生成的静态网页在根目录下的public文件夹中，输入hexo server 可以本地预览自己的博客，输入hexo d的话就上传到github上，刷新github，在地址栏输入自己的博客网址打开主页，我们就可以看到自己的文章了！</p>
<h1 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h1><p>可能有很多人觉得这个默认的主题不好看，没关系我们可以自己选择自己喜欢的主题。我选择的主题是butterfly，简单明了，配置多样，当然好像选next的更多hhh。<br>这是butterfly主题的下载地址：<a href="https://github.com/jerryc127/hexo-theme-butterfly/">butterfly主题github地址</a></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>git</tag>
      </tags>
  </entry>
</search>
